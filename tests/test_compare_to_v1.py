"""Compare to fluxes generated by the previous version of starry."""
import starry2
import numpy as np
import os
norm = 0.5 * np.sqrt(np.pi)
npts = 300
keys = ['theta', 'xo', 'yo', 'ro',
        'Y_{0,0}', 'Y_{1,-1}', 'Y_{1,0}', 'Y_{1,1}', 'Y_{2,-1}',
        'Y_{2,-2}', 'Y_{2,0}', 'Y_{2,1}', 'Y_{2,2}', 'Y_{3,-1}',
        'Y_{3,-2}', 'Y_{3,-3}', 'Y_{3,0}', 'Y_{3,1}', 'Y_{3,2}',
        'Y_{3,3}', 'Y_{4,-1}', 'Y_{4,-2}', 'Y_{4,-3}', 'Y_{4,-4}',
        'Y_{4,0}', 'Y_{4,1}', 'Y_{4,2}', 'Y_{4,3}', 'Y_{4,4}',
        'Y_{5,-1}', 'Y_{5,-2}', 'Y_{5,-3}', 'Y_{5,-4}', 'Y_{5,-5}',
        'Y_{5,0}', 'Y_{5,1}', 'Y_{5,2}', 'Y_{5,3}', 'Y_{5,4}',
        'Y_{5,5}']
# Load the benchmarked values
v1 = np.loadtxt(os.path.join(os.path.dirname(os.path.abspath(__file__)),
                             'v1.txt'))

def test_transit():
    """Compare transit evaluation to the previous version of starry."""
    xo = np.linspace(-1.5, 1.5, npts)
    yo = np.linspace(-0.3, 0.7, npts)
    ro = 0.1

    # Double precision
    map = starry2.Map(3)
    map[1] = 0.4
    map[2] = 0.26
    map[3] = 0.1
    flux = map.flux(xo=xo, yo=yo, ro=ro)
    assert np.allclose(v1[0], flux)

    # Multi precision
    map = starry2.Map(3, multi=True)
    map[1] = 0.4
    map[2] = 0.26
    map[3] = 0.1
    flux = map.flux(xo=xo, yo=yo, ro=ro)
    assert np.allclose(v1[1], flux)


def test_occultation():
    """Compare occultation evaluation to the previous version of starry."""
    theta = np.linspace(0, 30, npts)
    xo = np.linspace(-1.5, 1.5, npts)
    yo = np.linspace(-0.3, 0.7, npts)
    ro = 0.1
    axis = [1, 2, 3]

    # Double precision
    map = starry2.Map(5)
    map[:, :] = norm
    map.axis = axis
    flux = map.flux(theta=theta, xo=xo, yo=yo, ro=ro)
    assert np.allclose(v1[2], flux)

    # Multi precision
    map = starry2.Map(5, multi=True)
    map[:, :] = norm
    map.axis = axis
    flux = map.flux(theta=theta, xo=xo, yo=yo, ro=ro)
    assert np.allclose(v1[3], flux)


def test_occultation_gradient():
    """Compare occult. evaluation w/ grad to the previous version of starry."""
    theta = np.linspace(1, 359, npts)
    xo = np.linspace(-1.5, 1.5, npts)
    yo = np.linspace(-0.3, 0.7, npts)
    ro = 0.1
    axis = [1, 2, 3]

    # Double precision
    map = starry2.Map(5)
    map[:, :] = norm
    map.axis = axis
    flux, grad = map.flux(theta=theta, xo=xo, yo=yo, ro=ro, gradient=True)

    # Check the flux is close
    assert np.allclose(v1[4], flux)

    # Check the gradients are close
    for i, key in enumerate(keys):
        if ('Y_' in key):
            assert(np.allclose(v1[5 + i], norm * grad[key]))
        else:
            assert(np.allclose(v1[5 + i], grad[key]))


if __name__ == "__main__":
    test_transit()
    test_occultation()
    test_occultation_gradient()
