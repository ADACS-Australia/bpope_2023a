/**
Taylor expansions for the solver module.

*/

#ifndef _STARRY_TAYLOR_H_
#define _STARRY_TAYLOR_H_

#include <iostream>
#include <cmath>
#include <Eigen/Core>
#include "errors.h"
#include "fact.h"
#include "ellip.h"

// Largest value of l for large occultors
// (analytic expressions are numerically unstable above this)
#ifndef STARRY_LMAX_LARGE_OCC
#define STARRY_LMAX_LARGE_OCC                   8
#endif

// Taylor expansion of the M integral at large radius
#ifndef STARRY_RADIUS_THRESH_M
#define STARRY_RADIUS_THRESH_M                  2.0
#endif
#define STARRY_R_ORDER                          26
#define STARRY_R_MAXPQ                          12
#define STARRY_R_NPQ                            7
static const double STARRY_R_COEFF[STARRY_R_NPQ][STARRY_R_NPQ][STARRY_R_ORDER] = {{{0,0,2.356194490192345,0.19634954084936207,0.055223308363883075,0.023009711818284616,0.011744540407249439,0.006795055521337176,0.004282300615009366,0.002871860333081678,0.0020192767966980547,0.0014736641268831765,0.0011083182287600554,-0.10378098778054148,0.16323134549823523,0,0,0,0,0,0,0,0,0,0,0},{0,0,2.356194490192345,-0.19634954084936207,-0.018407769454627694,-0.0046019423636569235,-0.00167779148674992,-0.0007550061690374639,-0.00038930005590994234,-0.00022091233331397522,-0.00013461845311320365,-0.00008668612511077508,-0.000058332538355792396,-0.020967785581598855,0.06387313519496161,0,0,0,0,0,0,0,0,0,0,0},{0,0,2.356194490192345,-0.5890486225480862,0.05522330836388308,0.0046019423636569235,0.001006674892049952,0.0003235740724446274,0.00012976668530331411,0.0000602488181765387,0.00003106579687227777,0.000017337225022155016,0.000010293977356904541,-0.008962330509539672,0.04084404563487341,0.005069296444044573,0,0,0,0,0,0,0,0,0,0},{0,0,2.356194490192345,-0.9817477042468103,0.2761165418194154,-0.023009711818284616,-0.00167779148674992,-0.0003235740724446274,-0.00009269048950236724,-0.00003347156565363261,-0.000014120816760126258,-6.668163470059622e-6,-3.431325785634847e-6,-0.004984531432686055,0.030161678591884247,0.009897197819325118,-0.002253020641797588,0,0,0,0,0,0,0,0,0},{0,0,2.356194490192345,-1.3744467859455345,0.6442719309119693,-0.16106798272799233,0.01174454040724944,0.000755006169037464,0.00012976668530331414,0.000033471565653632616,0.000010982857480098202,4.243376753674305e-6,1.8476369614956869e-6,-0.0031698902303436537,0.023951105940381717,0.014205349046549146,-0.006371366814953568,0.0012289203500714116,0,0,0,0,0,0,0,0},{0,0,2.356194490192345,-1.7671458676442586,1.1596894756415448,-0.48320394818397694,0.10570086366524496,-0.006795055521337176,-0.0003893000559099424,-0.0000602488181765387,-0.000014120816760126258,-4.243376753674305e-6,-1.511702968496471e-6,-0.002195760381097084,0.019873674652183957,0.01802688452429562,-0.012001430726431199,0.004598322848344128,-0.0007562586769670225,0,0,0,0,0,0,0},{0,0,2.356194490192345,-2.159844949342983,1.8223691760081417,-1.0630486860047494,0.38756983343923157,-0.07474561073470894,0.0042823006150093665,0.00022091233331397524,0.00003106579687227777,6.6681634700596224e-6,1.8476369614956869e-6,-0.0016091660873932476,0.016989121995123833,0.021441352940383233,-0.018874182661585373,0.010798098075956416,-0.003538210238667141,0.0005041724513113483,0,0,0,0,0,0}},{{0,0,0,0.39269908169872414,0.07363107781851078,0.027611654181941538,0.01342233189399936,0.00755006169037464,0.0046716006709193085,0.003092772666395653,0.0021538952498112583,0.0015603502519939514,0.001166650767115848,-0.08281320219894263,0.09935821030327362,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0.39269908169872414,-0.07363107781851078,-0.009203884727313847,-0.002684466378799872,-0.0010785802414820915,-0.0005190667412132565,-0.0002811611514905139,-0.0001656842499854814,-0.0001040233501329301,-0.00006862651571269694,-0.012005455072059181,0.0230290895600882,-0.005069296444044572,0,0,0,0,0,0,0,0,0,0},{0,0,0,0.39269908169872414,-0.22089323345553233,0.02761165418194154,0.002684466378799872,0.0006471481448892548,0.00022245717480568137,0.00009372038383017132,0.00004518661363240403,0.00002400538849221464,0.000013725303142539387,-0.003977799076853617,0.010682367042989164,-0.004827901375280545,0.002253020641797588,0,0,0,0,0,0,0,0,0},{0,0,0,0.39269908169872414,-0.3681553890925539,0.1380582709097077,-0.013422331893999362,-0.0010785802414820915,-0.00022245717480568137,-0.00006694313130726523,-0.00002510367424022446,-0.000010911540223733927,-5.278962747130534e-6,-0.0018146412023424016,0.006210572651502533,-0.0043081512272240274,0.00411834617315598,-0.0012289203500714116,0,0,0,0,0,0,0,0},{0,0,0,0.39269908169872414,-0.5154175447295755,0.32213596545598466,-0.09395632325799552,0.0075500616903746405,0.0005190667412132566,0.00009372038383017132,0.00002510367424022446,8.48675350734861e-6,3.359339929992158e-6,-0.0009741298492465693,0.00407743128819776,-0.003821535477746477,0.005630063911477631,-0.0033694024982727166,0.0007562586769670225,0,0,0,0,0,0,0},{0,0,0,0.39269908169872414,-0.6626797003665971,0.5798447378207724,-0.28186896977398657,0.06795055521337176,-0.0046716006709193085,-0.00028116115149051397,-0.00004518661363240403,-0.000010911540223733927,-3.359339929992158e-6,-0.0005865942937038367,0.0028845526570601254,-0.0034144684160876118,0.006872751935154173,-0.006199775227612289,0.0027819515617001187,-0.0005041724513113483,0,0,0,0,0,0},{0,0,0,0.39269908169872414,-0.8099418560036186,0.9111845880040709,-0.6201117335027705,0.24915203578236314,-0.051387607380112395,0.0030927726663956536,0.00016568424998548143,0.00002400538849221464,5.278962747130534e-6,-0.0003772786385029879,0.0021513794335888434,-0.0030764770476177225,0.007917692753178992,-0.009568940085412732,0.006446887809317229,-0.002334445551870193,0.0003558864362197753,0,0,0,0,0}},{{0,0,0,0,0.14726215563702155,0.03681553890925539,0.016106798272799233,0.008628641931856732,0.005190667412132565,0.003373933817886167,0.00231957949979674,0.0016643736021268816,0.001235277282828545,-0.07080774712688345,0.07632912074318542,0.005069296444044573,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0.14726215563702155,-0.03681553890925539,-0.005368932757599744,-0.0017257283863713463,-0.0007415239160189379,-0.00037488153532068527,-0.00021087086361788545,-0.00012802873862514475,-0.00008235181885523633,-0.008027655995205565,0.012346722517099036,-0.00024139506876402726,-0.002253020641797588,0,0,0,0,0,0,0,0,0},{0,0,0,0,0.14726215563702155,-0.11044661672776616,0.016106798272799233,0.0017257283863713463,0.00044491434961136273,0.00016066351513743652,0.00007029028787262848,0.00003491692871594856,0.00001900426588966992,-0.0021631578745112154,0.0044717943914866325,-0.000519750148056518,-0.0018653255313583925,0.0012289203500714114,0,0,0,0,0,0,0,0},{0,0,0,0,0.14726215563702155,-0.18407769454627693,0.08053399136399617,-0.008628641931856732,-0.0007415239160189378,-0.00016066351513743652,-0.00005020734848044892,-0.000019398293731082537,-8.638302677122692e-6,-0.0008405113530958321,0.002133141363304772,-0.00048661574947755047,-0.0015117177383216502,0.0021404821482013045,-0.0007562586769670225,0,0,0,0,0,0,0},{0,0,0,0,0.14726215563702155,-0.25770877236478773,0.18791264651599104,-0.060400493522997124,0.005190667412132565,0.00037488153532068527,0.00007029028787262849,0.000019398293731082537,6.718679859984316e-6,-0.0003875355555427327,0.0011928786311376349,-0.00040706706165886513,-0.001242688023676542,0.002830372729339572,-0.002025692884733096,0.0005041724513113483,0,0,0,0,0,0},{0,0,0,0,0.14726215563702155,-0.3313398501832985,0.33824276372878387,-0.18120148056899135,0.046716006709193084,-0.003373933817886167,-0.00021087086361788545,-0.00003491692871594856,-8.638302677122692e-6,-0.00020931565520084877,0.0007331732234712821,-0.0003379913684698895,-0.0010449408180248192,0.0033691648578004435,-0.00366493624761711,0.0018302731005588443,-0.0003558864362197753,0,0,0,0,0},{0,0,0,0,0.14726215563702155,-0.4049709280018093,0.5315243430023746,-0.398643257251781,0.17129202460037465,-0.03711327199674784,0.00231957949979674,0.00012802873862514475,0.00001900426588966992,-0.00011534810471155766,0.0004860811447307619,-0.00028045643213612414,-0.0008950460572609154,0.0038056968786113086,-0.005583259600833225,0.004199366645151957,-0.0016342679768513364,0.0002622321108987818,0,0,0,0}},{{0,0,0,0,0,0.07363107781851078,0.021475731030398976,0.010354370318228077,0.005932191328151503,0.0037488153532068526,0.0025304503634146253,0.0017924023407520264,0.0013176291016837813,-0.06278009113167789,0.06398239822608638,0.0053106915128086,0.002253020641797588,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0.07363107781851078,-0.021475731030398976,-0.0034514567727426926,-0.0011864382656303007,-0.0005355450504581218,-0.00028116115149051397,-0.0001629456673410933,-0.00010135608474490625,-0.0058644981206943505,0.007874928125612404,0.0002783550792924908,-0.0003876951104391953,-0.0012289203500714116,0,0,0,0,0,0,0,0},{0,0,0,0,0,0.07363107781851078,-0.06442719309119693,0.010354370318228077,0.0011864382656303005,0.00032132703027487304,0.0001204976363530774,0.0000543152224470311,0.000027642568566792613,-0.0013226465214153833,0.0023386530281818605,-0.000033134398578967565,-0.00035360779303674216,-0.0009115617981298932,0.0007562586769670225,0,0,0,0,0,0,0},{0,0,0,0,0,0.07363107781851078,-0.10737865515199489,0.051771851591140394,-0.005932191328151503,-0.0005355450504581218,-0.0001204976363530774,-0.000038796587462165074,-0.00001535698253710701,-0.00045297579755309956,0.0009402627321671372,-0.00007954868781868538,-0.0002690297146451084,-0.0006898905811382671,0.0012694342077660735,-0.0005041724513113483,0,0,0,0,0,0},{0,0,0,0,0,0.07363107781851078,-0.15033011721279285,0.12080098704599425,-0.04152533929706052,0.0037488153532068526,0.00028116115149051397,0.0000543152224470311,0.00001535698253710701,-0.0001782199003418839,0.0004597054076663526,-0.00006907569318897555,-0.00019774720565172275,-0.0005387921284608719,0.0016392433628840144,-0.001326100649247496,0.0003558864362197753,0,0,0,0,0},{0,0,0,0,0,0.07363107781851078,-0.19328157927359077,0.21744177668278963,-0.12457601789118156,0.03373933817886167,-0.0025304503634146253,-0.0001629456673410933,-0.000027642568566792613,-0.00009396755048929113,0.0002470920787405202,-0.000057534936333765386,-0.0001498947607639038,-0.00043653202081086513,0.0019183233532161154,-0.002369093544593113,0.001278381540631561,-0.0002622321108987818,0,0,0,0},{0,0,0,0,0,0.07363107781851078,-0.23623304133438874,0.3416942205015266,-0.27406723936059946,0.12371090665582614,-0.02783495399756088,0.0017924023407520264,0.00010135608474490625,-0.000030216831985673054,0.00015118644752238746,-0.00004383292581730153,-0.00011515429663867349,-0.00036324953080100727,0.002139613976540635,-0.0035751373276222687,0.0029104313887252952,-0.0011960995262424027,0.00019979589401811947,0,0,0}},{{0,0,0,0,0,0,0.04295146206079795,0.01380582709097077,0.007118629593781804,0.004284360403664975,0.0028116115149051397,0.00195534800809312,0.0014189851864286876,-0.05691559301098354,0.05610747010047398,0.005032336433516109,0.0026407157522367834,0.0012289203500714116,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0.04295146206079795,-0.01380582709097077,-0.0023728765312606014,-0.0008568720807329949,-0.00040165878784359136,-0.0002172608897881244,-0.00012899865331169886,-0.004541851599278967,0.005536275097430544,0.00031148947787145836,-0.000034087317402453124,-0.0003173585519415184,-0.0007562586769670225,0,0,0,0,0,0,0},{0,0,0,0,0,0,0.04295146206079795,-0.04141748127291232,0.007118629593781804,0.0008568720807329949,0.0002409952727061548,0.00009311180990919618,0.00004299955110389962,-0.0008696707238622838,0.0013983902960147234,0.000046414289239717816,-0.00008457807839163383,-0.00022167121699162608,-0.000513175530799051,0.0005041724513113483,0,0,0,0,0,0},{0,0,0,0,0,0,0.04295146206079795,-0.06902913545485385,0.03559314796890902,-0.004284360403664975,-0.00040165878784359136,-0.00009311180990919618,-0.00003071396507421402,-0.00027475589721121565,0.00048055732450078464,-0.000010472994629709829,-0.00007128250899338565,-0.00015109845267739528,-0.00036980915511794087,0.0008219281979361477,-0.0003558864362197753,0,0,0,0,0},{0,0,0,0,0,0,0.04295146206079795,-0.09664078963679539,0.08305067859412103,-0.029990522825654817,0.0028116115149051392,0.0002172608897881244,0.00004299955110389962,-0.00008425234985259276,0.00021261332892583235,-0.000011540756855210165,-0.00004785244488781892,-0.00010226010765000665,-0.0002790799903321011,0.0010429928953456168,-0.0009224951044117859,0.0002622321108987818,0,0,0,0},{0,0,0,0,0,0,0.04295146206079795,-0.12425244381873694,0.14949122146941787,-0.08997156847696447,0.025304503634146255,-0.00195534800809312,-0.00012899865331169886,-0.00006375071850361808,0.00009590563121813277,-0.000013702010516463863,-0.00003474046412523031,-0.00007328249000985792,-0.00022129062332451935,0.0012060437830291558,-0.0016320498480937341,0.0009338674153436209,-0.00019979589401811947,0,0,0},{0,0,0,0,0,0,0.04295146206079795,-0.1518640980006785,0.23491477659479953,-0.19793745064932183,0.09278317999186961,-0.021508828089024316,0.0014189851864286876,0.00006205303809144489,0.00006716095752345861,-6.407779409732639e-6,-0.00002340232480076268,-0.00005348010266093992,-0.0001813407035681881,0.0013338250567684726,-0.002445434401552507,0.002112961287777738,-0.0009062170907250419,0.00015636200401418046,0,0}},{{0,0,0,0,0,0,0,0.02761165418194154,0.009491506125042404,0.005141232484397969,0.003213270302748731,0.002172608897881244,0.0015479838397403863,-0.052373741411704575,0.05057119500304343,0.004720846955644651,0.002674803069639236,0.00154627890201293,0.0007562586769670225,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0.02761165418194154,-0.009491506125042405,-0.0017137441614659898,-0.0006426540605497462,-0.0003103726996973206,-0.0001719982044155985,-0.0036721808754166837,0.0041378848014158205,0.0002650751886317405,0.00005049076098918071,-0.0000956873349498923,-0.00024308314616797153,-0.0005041724513113483,0,0,0,0,0,0},{0,0,0,0,0,0,0,0.02761165418194154,-0.028474518375127215,0.005141232484397969,0.0006426540605497461,0.00018622361981839234,0.00007371351617811364,-0.0005949148266510681,0.0009178329715139387,0.000056887283869427645,-0.000013295569398248184,-0.00007057276431423079,-0.00014336637568111013,-0.00031775574662479934,0.0003558864362197753,0,0,0,0,0},{0,0,0,0,0,0,0,0.02761165418194154,-0.04745753062521202,0.025706162421989847,-0.003213270302748731,-0.0003103726996973206,-0.00007371351617811364,-0.00019050354735862288,0.00026794399557495226,1.067762225500338e-6,-0.000023430064105566715,-0.00004883834502738862,-0.0000907291647858397,-0.00022106469740946913,0.0005666086681920106,-0.0002622321108987818,0,0,0,0},{0,0,0,0,0,0,0,0.02761165418194154,-0.06644054287529684,0.05998104565130964,-0.022492892119241117,0.002172608897881244,0.0001719982044155985,-0.000020501631348974676,0.00011670769770769959,2.161253661253696e-6,-0.000013111980762588614,-0.000028977617640148746,-0.00005778936700758179,-0.00016305088768353888,0.0007095547436819481,-0.0006716353044448391,0.00019979589401811947,0,0,0},{0,0,0,0,0,0,0,0.02761165418194154,-0.08542355512538165,0.10796588217235735,-0.06747867635772335,0.019553480080931197,-0.0015479838397403866,-0.00012580375659506298,0.00002874467369467416,-7.2942311067312244e-6,-0.000011338139324467633,-0.000019802387348918,-0.000039949919756331243,-0.00012778127373931687,0.0008133845534587733,-0.0011790938724341171,0.0007064211967069224,-0.00015636200401418046,0,0},{0,0,0,0,0,0,0,0.02761165418194154,-0.10440656737546646,0.169660671985133,-0.14845308798699136,0.07169609363008106,-0.01702782223714425,0.0011365939036982698,0.0000903404030404045,8.32082659582673e-6,-4.086120203307769e-6,-0.000012149106059032726,-0.0000281177512172002,-0.0001039284490370614,0.0008942899844038098,-0.0017570468919517743,0.001590292694022043,-0.0007058627609783004,0.00012508960321134437,0}},{{0,0,0,0,0,0,0,0,0.01898301225008481,0.006854976645863959,0.003855924363298477,0.0024829815975785647,0.001719982044155985,-0.048701560536287894,0.046433310201627616,0.0044557717670129105,0.0026243123086500558,0.0016419662369628223,0.0009993418231349941,0.0005041724513113483,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0.01898301225008481,-0.006854976645863959,-0.0012853081210994924,-0.0004965963195157129,-0.00024571172059371216,-0.003077266048765615,0.003220051829901882,0.0002081879047623129,0.00006378633038742888,-0.00002511457063566151,-0.00009971677048686138,-0.00018641670468654898,-0.0003558864362197753,0,0,0,0,0},{0,0,0,0,0,0,0,0,0.018983012250084808,-0.020564929937591875,0.003855924363298477,0.0004965963195157129,0.00014742703235622729,-0.0004044112792924452,0.0006498889759389864,0.0000558195216439273,0.000010134494707318531,-0.000021734419286842166,-0.000052637210895270436,-0.00009669104921533022,-0.00021072223197223536,0.0002622321108987818,0,0,0,0},{0,0,0,0,0,0,0,0,0.01898301225008481,-0.0342748832293198,0.019279621816492384,-0.0024829815975785647,-0.00024571172059371216,-0.00017000191600964823,0.0001512362978672527,-1.0934914357533582e-6,-0.000010318083342978103,-0.000019860727387239877,-0.000032939797778257915,-0.00005801380972593027,-0.00014294607548993746,0.0004094031935460573,-0.00019979589401811947,0,0,0},{0,0,0,0,0,0,0,0,0.01898301225008481,-0.047984836521047715,0.044985784238482235,-0.017380871183049953,0.001719982044155985,0.0001053021252460883,0.00008796302401302544,9.455484767984921e-6,-1.7738414381209807e-6,-9.175230291230746e-6,-0.00001783944725125054,-0.00003526961394422201,-0.00010382980977682513,0.0005074585679892779,-0.000506625302688803,0.00015636200401418046,0,0},{0,0,0,0,0,0,0,0,0.01898301225008481,-0.06169478981277563,0.08097441162926802,-0.05214261354914986,0.015479838397403864,-0.0012623976602933328,-0.00006159572934573034,-0.000015615057702557954,-7.2520191211598635e-6,-7.653281289885274e-6,-0.000011832168539131046,-0.000023852824702255476,-0.00008090543094503654,0.0005779530195176573,-0.0008838714973151206,0.0005495007569641198,-0.00012508960321134437,0},{0,0,0,0,0,0,0,0,0.018983012250084808,-0.07540474310450354,0.12724550398884973,-0.11471374980812968,0.0567594074571475,-0.013758171897898366,0.0009522723770779479,0.00005553821561182761,6.797130257387889e-6,-1.8281928182357398e-6,-6.652145421891239e-6,-0.000016352684488280402,-0.00006558487437326914,0.0006327641771678347,-0.0013113920554307433,0.0012318634974560782,-0.0005624068271367188,0.00010192486187591021}}};

// Re-parametrize s2() when |b-r| < this value
#ifndef STARRY_BMINUSR_THRESH_S2
#define STARRY_BMINUSR_THRESH_S2                1.e-2
#endif

// Default value of the radius threshold for quartic expansion of the occultor limb
#ifndef STARRY_QUARTIC_MAXL
#define STARRY_QUARTIC_MAXL                     8
const vector<double> STARRY_RADIUS_THRESH_QUARTIC_VEC({100, 30, 30, 20, 15, 10, 8, 6, 5});
template <typename T>
T STARRY_RADIUS_THRESH_QUARTIC(int l) {
    if (l <= STARRY_QUARTIC_MAXL)
        return STARRY_RADIUS_THRESH_QUARTIC_VEC[l];
    else
        return 1;
}
#endif

// Taylor expansion of J() for small impact parameter
#define STARRY_B_ORDER                          12
template <typename T>
T STARRY_B_THRESH_J(T r) {return 0.1 * (1 - r);}
static const double STARRY_B_COEFF[STARRY_B_ORDER][STARRY_B_ORDER / 2] = {{1.,0,0,0,0,0},{-3.,0,0,0,0,0}, {-1.5,1.5,0,0,0,0}, {1.5,0.5,0,0,0,0}, {0.375,0.75,0.375,0,0,0},{0.375,0.75,0.375,0,0,0}, {0.0625,0.5625,0.9375,0.4375,0,0}, {0.1875,0.9375,1.3125,0.5625,0,0},{0.0234375,0.46875,1.640625,1.96875,0.7734375,0}, {0.1171875,1.09375,2.953125,3.09375,1.1171875,0},{0.01171875,0.41015625,2.4609375,5.4140625,5.02734375,1.67578125},{0.08203125,1.23046875,5.4140625,10.0546875,8.37890625,2.58984375}};


template <typename T>
using Vector = Eigen::Matrix<T, Eigen::Dynamic, 1>;
template <typename T>
using Matrix = Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>;

namespace solver
{
    template <class T>
    class Greens;
    bool is_even(int n, int ntimes);
    template <typename T>
    inline T step(T x);
};

namespace taylor {

    // Taylor expand the difference between the elliptic integrals
    // for the s2 term when r >= 1; much more numerically stable!
    template <typename T>
    inline T s2(solver::Greens<T>& G) {
        T x = 1. / G.b_r(1);
        T eps = x - 1;
        T EP = ellip::PI(1 - 1. / ((G.b() - G.r()) * (G.b() - G.r())), G.ksq());
        T EminusK = -G.pi * (0.25 * G.ksq() + 0.09375 * G.ksq(2) + 0.05859375 * G.ksq(3) + 0.042724609375 * G.ksq(4) +
                     0.0336456298828125 * G.ksq(5) + 0.027757644653320312 * G.ksq(6) + 0.023627042770385742 * G.ksq(7) +
                     0.020568184554576874 * G.ksq(8) + 0.018211413407698274 * G.ksq(9) + 0.016339684807462618 * G.ksq(10) +
                     0.01481712326858542 * G.ksq(11) + 0.013554300262740071 * G.ksq(12));
        T taylor = 2 * G.b(3) * sqrt(x) * (EminusK * (16 + 28 * eps + 14 * eps * eps) - eps * eps * (2 + 3 * eps) * G.ELL.K());
        T badterm = taylor + sqrt(G.br) * ((8 - 3 / G.br + 12 / G.b_r(1)) * G.ELL.K() - 16 * G.ELL.E());
        T goodterm = (3 * (G.b() + G.r()) / (G.b() - G.r()) * EP) / sqrt(G.br);
        T Lambda = (badterm + goodterm) / (9 * G.pi);
        return (2. * G.pi / 3.) * (1 - 1.5 * Lambda - solver::step(G.r() - G.b()));
    }

    // Taylor expansion about b = 0
    template <typename T>
    inline T computeJ(solver::Greens<T>& G, int u, int v) {
        int i, j, k, l;
        T res = 0;
        T foo;
        T r1 = 1 - G.r(2);
        Vector<T> fac;
        fac.resize(STARRY_B_ORDER);
        fac(0) = r1 * sqrt(r1);
        for (i = 1; i < STARRY_B_ORDER; i++) fac(i) = fac(i - 1) / r1;
        l = 0;
        for (i = 0; i < STARRY_B_ORDER; i++) {
            foo = 0;
            for (j = 0; j < i / 2 + 1; j++) {
                k = (solver::is_even(i, 1) ? 2 * j : 2 * j + 1);
                foo += STARRY_B_COEFF[i][j] * G.r(k) * G.I(u, v + k) * fac(l + j);
            }
            l += (int) solver::is_even(i, 1);
            res += G.b(i) * foo;
        }
        return res;
    }

    // Approximate occultor limb as a quartic function
    template <typename T>
    inline T P(solver::Greens<T>& G) {
        if (!solver::is_even(G.mu / 2, 1))
            return 0;
        T res = 0;
        T amp = pow(G.b() - G.r(), G.nu / 2) / G.r();
        T jamp, jsum;
        T frac = (G.mu + 2.) / 4.;
        int twofrac = 1 + G.mu / 2;
        for (int i = 0; i <= G.nu / 2; i++) {
            jamp = fact::choose(G.nu / 2, i) * pow(2 * G.r() * (G.b() - G.r()), -i);
            jsum = 0;
            for (int j = 0; j <= i; j++) {
                jsum += fact::choose(i, j)
                      * pow(4, -j) / G.r(2 * j)
                      * G.coslam(twofrac + 2 * (i + j + 1))
                      * (1. / (frac + i + j + 1) + 0.5 * G.coslam(2) / (G.r(2) * (frac + i + j + 2)));
            }
            res += jamp * jsum;
        }
        return amp * res;

    }

    // Taylor expand M() at large k^2
    template <typename T>
    inline T computeM(solver::Greens<T>& G, int p, int q) {
        if ((p > STARRY_R_MAXPQ) || (q > STARRY_R_MAXPQ)) throw errors::BadTaylor();
        T res = 0;
        for (int i = 0; i < STARRY_R_ORDER; i++)
            res += STARRY_R_COEFF[p / 2][q / 2][i] * G.ksq(i);
        return res;
    }


}; // namespace taylor

#endif
